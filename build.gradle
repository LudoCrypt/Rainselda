buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		gradlePluginPortal()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		google()
	}
	dependencies {}
}

apply plugin: "eclipse"
apply plugin: "java-library"

version = '1.0'

ext {
	appName = "Rainselda"
	gdxVersion = '1.12.1'
	roboVMVersion = '2.3.20'
	box2DLightsVersion = '1.5'
	ashleyVersion = '1.7.4'
	aiVersion = '1.8.2'
	gdxControllersVersion = '2.2.1'
	appdirsVersion = '1.4.0'
}

repositories {
	mavenLocal()
	mavenCentral()
	google()
	gradlePluginPortal()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	maven { url "https://jitpack.io" }
}

dependencies {
    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
    api "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
	api "net.harawata:appdirs:$appdirsVersion"
}

sourceCompatibility = 17
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["assets"]

project.ext.mainClassName = "net.ludocrypt.rainselda.DesktopLauncher"
project.ext.assetsDir = new File("assets")

import org.gradle.internal.os.OperatingSystem

tasks.register('run', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

tasks.register('dist', Jar) {
	dependsOn classes
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

eclipse.project.name = appName
